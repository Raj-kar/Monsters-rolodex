{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handelChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAKaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,mCAA6EC,IAAG,UAAKL,EAAMG,QAAQG,QAC3G,mCAAMN,EAAMG,QAAQG,KAApB,OACA,kCAAKN,EAAMG,QAAQI,MAAnB,WCHCC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPtBO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOZ,UAAU,SACjBa,KAAK,SACLC,SAAUF,EACVD,YAAaA,MCmCNI,E,kDApCZ,aAAe,IAAD,8BACX,gBAEKC,MAAQ,CACVR,SAAU,GACVS,YAAa,IALL,E,qDASd,WAAqB,IAAD,OACjBC,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAC1Bf,SAAUc,S,oBAInB,WAAU,IAAD,SAC4BE,KAAKR,MAA/BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAxB,GAAO,OAC7CA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBAGnD,OACG,sBAAK3B,UAAU,MAAf,UACG,mDACA,cAAC,EAAD,CACGW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BdO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4a2b7694.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&set=set2&size=180x180`} alt={`${props.monster.name}`} />\r\n            <h2> {props.monster.name} </h2>\r\n            <p> {props.monster.email} </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './card-list.styles.css'\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(monster =>\r\n                <Card key={monster.id} monster={monster} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handelChange }) => {\r\n    return (\r\n        <input className=\"search\" \r\n        type='search' \r\n        onChange={handelChange} \r\n        placeholder={placeholder} />\r\n    )\r\n}","// import logo from './logo.svg';\nimport './App.css';\n\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n   constructor() {\n      super();\n\n      this.state = {\n         monsters: [],\n         searchField: ''\n      };\n   }\n\n   componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(users => this.setState({\n            monsters: users\n         }));\n   }\n\n   render() {\n      const { monsters, searchField } = this.state; // destructor\n      const filteredMonsters = monsters.filter(monster =>\n         monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n      return (\n         <div className=\"App\">\n            <h1> Monsters Rolodex</h1>\n            <SearchBox\n               placeholder=\"Search monsters\"\n               handelChange={e => this.setState({ searchField: e.target.value })}\n            />\n            <CardList monsters={filteredMonsters} />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}